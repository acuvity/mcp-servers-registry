name: "🚀 Contribute with your MCP Server"
description: "Submit your MCP-compatible tool to the ARC + Minibridge ecosystem."
title: "MCP Server: {{tool_name}}"
labels:
  - mcp
  - contribution
body:
  - type: markdown
    attributes:
      value: |
        Thank you for your interest in contributing to the **ARC + Minibridge** ecosystem!
        Please fill out the details below to help us integrate your MCP-compatible tool securely and efficiently.

  - type: dropdown
    id: tool_source_type
    attributes:
      label: "📦 MCP Tool Source"
      description: "Select one source and provide the corresponding URL."
      options:
        - "GitHub Release"
        - "npm Package"
        - "PyPI Package"

  - type: input
    id: tool_source_url
    attributes:
      label: "Tool Source URL"
      description: "Paste the link here"
      placeholder: "https://github.com/your-org/your-tool/releases"
    validations:
      required: true

  - type: textarea
    id: run_command
    attributes:
      label: "🛠️ Run Command"
      description: |
        How is your MCP tool launched?
        Provide either the CLI command or a sample `mcpServers` JSON configuration block.
      placeholder: |
        ```json
        {
          "mcpServers": {
            "your-tool": {
              "command": "your-binary",
              "args": ["--run", "mcp-mode"]
            }
          }
        }
        ```

    validations:
      required: true

  - type: textarea
    id: config_args_env
    attributes:
      label: "⚙️ Configuration: Arguments and Environment Variables"
      description: |
        List any arguments or environment variables your tool accepts, in table form:
      placeholder: |
        | Name       | Type       | Default | Description                       |
        | ---------- | ---------- | ------- | --------------------------------- |
        | `MY_TOKEN` | env var    | (none)  | API token used for authentication |
        | `--debug`  | CLI flag   | false   | Enable verbose output             |
        | `--port`   | CLI option | 8080    | Port for local HTTP API           |

  - type: checkboxes
    id: runtime_dependencies
    attributes:
      label: "🌐 Runtime Dependencies"
      description: "What does your tool rely on at runtime? Check all that apply."
      options:
        - label: "Native desktop tools (e.g., git, curl)"
        - label: "Remote APIs (e.g., cloud-based endpoints)"
        - label: "Fully self-contained / standalone"

  - type: dropdown
    id: persistent_storage
    attributes:
      label: "💾 Persistent Storage Required?"
      description: Does your MCP server requires a persistent storage to store states
      options:
        - "Yes, needs a persistent volume"
        - "No, runs entirely in-memory"
    validations:
      required: true

  - type: input
    id: storage_explanation
    attributes:
      label: "If yes, explain what’s stored and why"
      description: "_e.g., stores a SQLite DB for caching results_"

  - type: dropdown
    id: concurrent_clients
    attributes:
      label: "👥 Supports Concurrent Clients?"
      description: "Can your tool handle requests from multiple clients at once?"
      options:
        - "Yes"
        - "No, single-client only"
        - "Not sure"
    validations:
      required: true

  - type: textarea
    id: session_state
    attributes:
      label: "Session State / Temp Directory Notes"
      description: "Does it maintain session state or write to shared temp directories?"

  - type: markdown
    attributes:
      value: |
        Once submitted, we’ll review and help wrap your tool in an **ARC (Acuvity Runtime Container)** with SBOM checks, Rego policy support, and a Helm-based deployment for secure runtime.
        Let’s make the MCP ecosystem even stronger—together! 🔐🛠️🚀
