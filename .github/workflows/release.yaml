name: Build & Publish MCP Servers

on:
  push:
    branches: ["main"]
    paths:
      - "mcp-server-*/**"
  workflow_dispatch:
    inputs:
      name:
        description: "Force-build a specific server (without the mcp-server- prefix)"
        required: false
        type: string

# only one run at a time. Keep stacking
concurrency:
  group: build-and-release-${{ github.ref }}

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changes
        id: set
        shell: bash
        run: |
          # workflow dispatch trigger
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.name }}" ]]; then
            if [[ ! -d mcp-server-${{ github.event.inputs.name }} ]]; then
              echo "${{ github.event.inputs.name }} is not a valid mcp-server name"
              exit 1
            fi
            MATRIX=$(jq -nc --arg srv "${{ github.event.inputs.name }}" \
                            '[{server:$srv,build_image:true,build_chart:true}]')
            echo "matrix=$MATRIX" >>"$GITHUB_OUTPUT"
            exit 0
          fi
          # git driven matrix
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch origin main --depth=1
            BASE=$(git rev-parse origin/main)
          else
            BASE="${{ github.event.before }}"
          fi
          HEAD="${{ github.sha }}"
          CHANGED_FILES=$(git diff --name-only "$BASE" "$HEAD" -- 'mcp-server-*/*')

          MATRIX=$(echo "$CHANGED_FILES" |
            awk -F/ '/^mcp-server-/{print $1}' | sort -u |
            while read -r SRV; do
              IMG=false; CHART=false
              [[ "$CHANGED_FILES" =~ (^|$'\n')$SRV/docker(/|$) ]]  && IMG=true
              [[ "$CHANGED_FILES" =~ (^|$'\n')$SRV/version.env$ ]] && { IMG=true; CHART=true; }
              [[ "$CHANGED_FILES" =~ (^|$'\n')$SRV/charts(/|$) ]]  && CHART=true
              printf '{"server":"%s","build_image":%s,"build_chart":%s}\n' \
                     "${SRV#mcp-server-}" "$IMG" "$CHART"
            done | jq -s)

          [[ -z "$MATRIX" ]] && MATRIX="[]"
          echo "matrix=$(echo "$MATRIX" | jq -c)" >> "$GITHUB_OUTPUT"

  container:
    needs: detect-changes
    if: needs.detect-changes.outputs.matrix != '[]'
    strategy:
      fail-fast: false
      max-parallel: 20
      matrix:
        include: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
        arch: [amd64, arm64]
    concurrency:
      group: build-${{ matrix.server }}-${{ matrix.arch }}
      cancel-in-progress: false
    runs-on: ubuntu-latest

    env:
      OCI_REGISTRY: docker.io/acuvity

    steps:
      - uses: actions/checkout@v4
      - name: Load version info
        id: version
        run: |
          while IFS='=' read -r k v; do
            echo "$k=$v" >> "$GITHUB_OUTPUT"
          done < "mcp-server-${{ matrix.server }}/version.env"

      - uses: docker/setup-qemu-action@v3
        if: matrix.build_image
      - uses: docker/setup-buildx-action@v3
        if: matrix.build_image

      - uses: docker/login-action@v3
        if: matrix.build_image
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push ${{ matrix.arch }} image (digestâ€‘only)
        id: image
        if: matrix.build_image
        uses: docker/build-push-action@v5
        with:
          context: mcp-server-${{ matrix.server }}/docker
          platforms: linux/${{ matrix.arch }}
          sbom: true
          provenance: true
          tags: ${{ env.OCI_REGISTRY}}/mcp-server-${{ matrix.server }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
          cache-from: |
            type=registry,ref=${{ env.OCI_REGISTRY }}/mcp-servers-build-cache:${{ matrix.server }}-${{ matrix.arch }}
          cache-to: |
            type=registry,ref=${{ env.OCI_REGISTRY }}/mcp-servers-build-cache:${{ matrix.server }}-${{ matrix.arch }},mode=max

      - name: Export digest
        run: |
          mkdir -p "$RUNNER_TEMP/digests"
          echo "${{ matrix.arch }}=${{ steps.image.outputs.digest }}" \
            > "$RUNNER_TEMP/digests/${{ matrix.arch }}.env"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.server }}-${{ matrix.arch }}
          path: ${{ runner.temp }}/digests/*
          retention-days: 1

  manifest:
    needs:
      - container
      - detect-changes
    if: needs.detect-changes.outputs.matrix != '[]'
    strategy:
      fail-fast: false
      max-parallel: 20
      matrix:
        include: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    runs-on: ubuntu-latest

    env:
      OCI_REGISTRY: docker.io/acuvity

    steps:
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install Cosign & Helm-sigstore
        uses: sigstore/cosign-installer@v3

      - name: Download digests from both arch builds
        uses: actions/download-artifact@v4
        with:
          pattern: digests-${{ matrix.server }}-*
          path: digests
          merge-multiple: true

      - name: Read digest variables
        id: dig
        shell: bash
        run: |
          for f in digests/*.env; do source "$f"; done
          echo "amd64=$amd64" >>"$GITHUB_OUTPUT"
          echo "arm64=$arm64" >>"$GITHUB_OUTPUT"

      - uses: actions/checkout@v4
      - name: Load version info
        id: version
        run: |
          while IFS='=' read -r k v; do echo "$k=$v" >> "$GITHUB_OUTPUT"; done < "mcp-server-${{ matrix.server }}/version.env"

      - name: Create multi-arch manifest w/ final tags
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          docker buildx imagetools create \
            --tag $OCI_REGISTRY/mcp-server-${{ matrix.server }}:${{ steps.version.outputs.CHARTS_VERSION }}-${{ steps.version.outputs.CONTAINER_TAG }} \
            --tag $OCI_REGISTRY/mcp-server-${{ matrix.server }}:${{ steps.version.outputs.CONTAINER_TAG }} \
            --tag $OCI_REGISTRY/mcp-server-${{ matrix.server }}:latest \
            $OCI_REGISTRY/mcp-server-${{ matrix.server }}@${{ steps.dig.outputs.amd64 }} \
            $OCI_REGISTRY/mcp-server-${{ matrix.server }}@${{ steps.dig.outputs.arm64 }}

          INDEX_DIGEST=$(docker buildx imagetools inspect $OCI_REGISTRY/mcp-server-${{ matrix.server }}:latest --format '{{.|json}}' | jq -r '.manifest.digest')
          cosign sign --yes $OCI_REGISTRY/mcp-server-${{ matrix.server }}@$INDEX_DIGEST

      - name: Push README to Docker Hub
        if: matrix.build_image
        uses: christian-korneck/update-container-description-action@v1
        env:
          DOCKER_USER: ${{ secrets.DOCKERHUB_API_USER }}
          DOCKER_PASS: ${{ secrets.DOCKERHUB_API_PASSWORD }}
        with:
          destination_container_repo: ${{ github.repository_owner }}/mcp-server-${{ matrix.server }}
          provider: dockerhub
          short_description: ${{ steps.version.outputs.HUB_DESCRIPTION }}
          readme_file: mcp-server-${{ matrix.server }}/docker/README.md

      - name: Package, push & sign Helm chart
        if: matrix.build_chart
        env:
          CHARTS_VERSION: ${{ steps.version.outputs.CHARTS_VERSION }}
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cd mcp-server-${{ matrix.server }}/charts
          helm package mcp-server-${{ matrix.server }} --version "$CHARTS_VERSION"
          DIGEST=$(helm push ./*.tgz oci://$OCI_REGISTRY 2>&1  |grep "Digest" | awk '{print $NF}')
          cosign sign --yes $OCI_REGISTRY/mcp-server-${{ matrix.server }}:$CHARTS_VERSION@$DIGEST
