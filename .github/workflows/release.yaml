name: Build & Publish MCP Server

on:
  workflow_call:
    inputs:
      server:
        type: string
      build_image:
        type: boolean
      build_chart:
        type: boolean
      build_readme:
        type: boolean

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  container:
    if: ${{ inputs.build_image }}
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]

    runs-on: ${{ matrix.arch == 'arm64' && 'ubuntu-22.04-arm' || 'ubuntu-latest' }}

    env:
      OCI_REGISTRY: docker.io/acuvity

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load version info
        id: version
        run: |
          while IFS='=' read -r k v; do
            echo "$k=$v" >> "$GITHUB_OUTPUT"
          done < "mcp-server-${{ inputs.server }}/version.env"

      - name: Setup docker
        uses: docker/setup-buildx-action@v3

      - name: Loggin to registry
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push ${{ matrix.arch }} image (digestâ€‘only)
        id: image
        uses: docker/build-push-action@v5
        with:
          context: mcp-server-${{ inputs.server }}/docker
          platforms: linux/${{ matrix.arch }}
          sbom: true
          provenance: true
          tags: ${{ env.OCI_REGISTRY}}/mcp-server-${{ inputs.server }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
          cache-from: |
            type=registry,ref=${{ env.OCI_REGISTRY }}/mcp-servers-build-cache:${{ inputs.server }}-${{ matrix.arch }}
          cache-to: |
            type=registry,ref=${{ env.OCI_REGISTRY }}/mcp-servers-build-cache:${{ inputs.server }}-${{ matrix.arch }},mode=max

      - name: Export digest
        run: |
          mkdir -p "$RUNNER_TEMP/digests"
          echo "${{ matrix.arch }}=${{ steps.image.outputs.digest }}" \
            > "$RUNNER_TEMP/digests/${{ matrix.arch }}.env"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ inputs.server }}-${{ matrix.arch }}
          path: ${{ runner.temp }}/digests/*
          retention-days: 1

  manifest:
    needs:
      - container
    runs-on: ubuntu-latest

    env:
      OCI_REGISTRY: docker.io/acuvity

    steps:
      - name: Setup docker
        uses: docker/setup-buildx-action@v3

      - name: Loggin to registry
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Download digest arm64
        uses: actions/download-artifact@v4
        with:
          name: digests-${{ inputs.server }}-arm64
          path: digests

      - name: Download digest amd64
        uses: actions/download-artifact@v4
        with:
          name: digests-${{ inputs.server }}-amd64
          path: digests

      - name: Read digest variables
        id: dig
        shell: bash
        run: |
          for f in digests/*.env; do source "$f"; done
          echo "amd64=$amd64" >>"$GITHUB_OUTPUT"
          echo "arm64=$arm64" >>"$GITHUB_OUTPUT"

      - uses: actions/checkout@v4
      - name: Load version info
        id: version
        run: |
          while IFS='=' read -r k v; do
            v=${v#\"}
            v=${v%\"}
            echo "$k=$v" >> "$GITHUB_OUTPUT"
          done < "mcp-server-${{ inputs.server }}/version.env"

      - name: Create multi-arch manifest w/ final tags
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          docker buildx imagetools create \
            --tag $OCI_REGISTRY/mcp-server-${{ inputs.server }}:${{ steps.version.outputs.CHARTS_VERSION }}-${{ steps.version.outputs.CONTAINER_TAG }} \
            --tag $OCI_REGISTRY/mcp-server-${{ inputs.server }}:${{ steps.version.outputs.CONTAINER_TAG }} \
            --tag $OCI_REGISTRY/mcp-server-${{ inputs.server }}:latest \
            $OCI_REGISTRY/mcp-server-${{ inputs.server }}@${{ steps.dig.outputs.amd64 }} \
            $OCI_REGISTRY/mcp-server-${{ inputs.server }}@${{ steps.dig.outputs.arm64 }}

          INDEX_DIGEST=$(docker buildx imagetools inspect $OCI_REGISTRY/mcp-server-${{ inputs.server }}:latest --format '{{.|json}}' | jq -r '.manifest.digest')
          cosign sign --yes $OCI_REGISTRY/mcp-server-${{ inputs.server }}@$INDEX_DIGEST

      - name: Update Docker Hub metadata
        run: |
          set -e

          echo "Authenticating with Docker Hub..."
          IDENTIFIER=${{ secrets.DOCKERHUB_API_USER }}
          SECRET=${{ secrets.DOCKERHUB_API_PASSWORD }}
          TOKEN=$(curl -s -X POST https://hub.docker.com/v2/users/login \
            -H "Content-Type: application/json" \
            -d "{\"username\": \"${IDENTIFIER}\", \"password\": \"${SECRET}\"}" \
            | jq -r .token)

          if [ -z "$TOKEN" ] || [ "$TOKEN" == "null" ]; then
            echo "Failed to authenticate with Docker Hub."
            exit 1
          fi

          echo "Authentication successful."
          REPO_NAME="acuvity/mcp-server-${{ inputs.server }}"

          echo "Updating repository categories..."
          CATEGORIES_RESPONSE=$(curl -s -w "%{http_code}" -X PATCH \
            "https://hub.docker.com/v2/repositories/${REPO_NAME}/categories/" \
            -H "Authorization: Bearer $TOKEN" \
            -H 'Content-Type: application/json' \
            --data-raw '[{"slug":"machine-learning-and-ai","name":"machine-learning-and-ai"},{"slug":"integration-and-delivery","name":"integration-and-delivery"}]')

          HTTP_CODE="${CATEGORIES_RESPONSE: -3}"
          if [[ "$HTTP_CODE" -ge 400 ]]; then
            echo "Failed to update categories. HTTP code: $HTTP_CODE"
            exit 1
          fi
          echo "Categories updated successfully."

          LOGO_PATH="mcp-server-${{ inputs.server }}/logo.png"
          if [ -f "$LOGO_PATH" ]; then
            echo "Uploading logo..."
            LOGO_RESPONSE=$(curl -s -w "%{http_code}" -X POST \
              "https://hub.docker.com/api/media/repos_logo/v1/acuvity%2Fmcp-server-${{ inputs.server }}/upload" \
              -H "Authorization: Bearer $TOKEN" \
              --data-binary @"$LOGO_PATH")

            HTTP_CODE="${LOGO_RESPONSE: -3}"
            if [[ "$HTTP_CODE" -ge 400 ]]; then
              echo "Failed to upload logo. HTTP code: $HTTP_CODE"
              exit 1
            fi
            echo "Logo uploaded successfully."
          else
            echo "Warning: Logo file not found at $LOGO_PATH, skipping logo upload."
          fi

          if [ -f "mcp-server-${{ inputs.server }}/docker/README.md" ]; then
            echo "Updating description from README.md..."
            DESCRIPTION_JSON=$(jq -n \
              --arg full_description "$(cat mcp-server-${{ inputs.server}}/docker/README.md)" \
              --arg description "${{ steps.version.outputs.HUB_DESCRIPTION }}" \
              '{full_description: $full_description, description: $description}')

            DESC_RESPONSE=$(curl -s -w "%{http_code}" -X PATCH \
              "https://hub.docker.com/v2/repositories/${REPO_NAME}/" \
              -H "Authorization: Bearer $TOKEN" \
              -H 'Content-Type: application/json' \
              --data-raw "${DESCRIPTION_JSON}")

            HTTP_CODE="${DESC_RESPONSE: -3}"
            if [[ "$HTTP_CODE" -ge 400 ]]; then
              echo "Failed to update description. HTTP code: $HTTP_CODE"
              exit 1
            fi
            echo "Description updated successfully."
          else
            echo "Warning: README.md not found, skipping description update."
          fi

          echo "Docker Hub metadata update complete."

  charts:
    if: ${{ inputs.build_chart }}
    runs-on: ubuntu-latest

    env:
      OCI_REGISTRY: docker.io/acuvity

    steps:
      - name: Setup docker
        uses: docker/setup-buildx-action@v3

      - name: Loggin to registry
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - uses: actions/checkout@v4
      - name: Load version info
        id: version
        run: |
          while IFS='=' read -r k v; do
            v=${v#\"}
            v=${v%\"}
            echo "$k=$v" >> "$GITHUB_OUTPUT"
          done < "mcp-server-${{ inputs.server }}/version.env"

      - name: Package, push & sign Helm chart
        env:
          CHARTS_VERSION: ${{ steps.version.outputs.CHARTS_VERSION }}
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cd mcp-server-${{ inputs.server }}/charts
          helm package mcp-server-${{ inputs.server }} --version "$CHARTS_VERSION"
          DIGEST=$(helm push ./*.tgz oci://$OCI_REGISTRY 2>&1  |grep "Digest" | awk '{print $NF}')
          cosign sign --yes $OCI_REGISTRY/mcp-server-${{ inputs.server }}:$CHARTS_VERSION@$DIGEST
